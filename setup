#!/bin/bash

script_cleanup() {
    popd > /dev/null
    trap - INT TERM
}

trap script_cleanup INT TERM

pushd . > /dev/null

# cd to the script's dir
cd "$(dirname "${BASH_SOURCE[0]}")"

ARNOLDI_HOME=$(pwd)

#------Create and source the env-----------------------------------------

# Parse venv name from environment.yml
VENVNAME="$(head -n 1 environment.yml)"
if [ $? -ne 0 ]; then 
    echo "Could not parse the environment name from environment.yml." >&2
    return 1
fi
VENVNAME=${VENVNAME//"name: "/}

# Check if venv is already activated
if [ "$CONDA_DEFAULT_ENV" != "$VENVNAME" ]; then
    # Activate the conda base env
    CONDA_DIR="$(conda info --base)"
    source "$CONDA_DIR"/etc/profile.d/conda.sh
    if [ $? -ne 0 ]; then
        echo "'conda' command error: Please ensure conda has been added to PATH and that 'conda init' has been run." >&2
        return 1
    fi

    # Check if venv exists
    if [ ! -d "$CONDA_DIR/envs/$VENVNAME" ]; then 
        # Create the environment from the file
        conda env create --file=environment.yml -n "$VENVNAME"
        if [ $? -ne 0 ]; then
            echo "conda env create error: could not create venv named '$VENVNAME'" >&2
            return 1
        fi
    fi

    # Source the environment
    conda activate "$VENVNAME"
    if [ $? -ne 0 ]; then
        echo "conda activate error: could not activate '$VENVNAME'" >&2
        return 1
    fi
fi

#------Build the standalone project--------------------------------------

mkdir -p build && cd build

if [[ ! -d install ]]; then
    cmake ..
    if [ $? -ne 0 ]; then
        echo "cmake error: could not run cmake" >&2
        return 1
    fi

    make install
    if [ $? -ne 0 ]; then
        echo "make error: could not run make" >&2
        return 1
    fi

    chmod +x "$ARNOLDI_HOME/install/bin/"*
fi

# Source the local project
if [[ -z "$ARNOLDI_INSTALL" ]]; then source "$ARNOLDI_HOME/install/setvars.sh"; fi
if [ $? -ne 0 ]; then
    echo "LARISA: source error" >&2
    script_cleanup
    unset script_cleanup
    return 1
fi

script_cleanup
unset script_cleanup

return 0